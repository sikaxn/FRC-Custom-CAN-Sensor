import can
import time

# —— Constants ——
DEVICE_ID           = 0x0A
MANUFACTURER_ID     = 0x08
DEVICE_NUMBER       = 33
GENERAL_API         = 0x350
CUSTOM_PIXEL_API    = 0x351
ESP_FEEDBACK_API    = 0x359

bus = can.Bus(interface='canalystii', channel=0, device=0, bitrate=1_000_000)

def make_can_msg_id(device_id, manufacturer_id, api_id, device_number):
    return (
        (device_id       & 0xFF) << 24 |
        (manufacturer_id & 0xFF) << 16 |
        (api_id          & 0x3FF) << 6 |
        (device_number   & 0x3F)
    )

def send_mode_255():
    arb_id = make_can_msg_id(DEVICE_ID, MANUFACTURER_ID, GENERAL_API, DEVICE_NUMBER)
    data = [255, 0, 0, 0, 128, 1, 0, 0]
    bus.send(can.Message(arbitration_id=arb_id, is_extended_id=True, data=data))
    print("→ Set mode 255")

def send_pixel(index, r, g, b):
    arb_id = make_can_msg_id(DEVICE_ID, MANUFACTURER_ID, CUSTOM_PIXEL_API, DEVICE_NUMBER)
    data = [
        (index >> 8) & 0xFF,
        index & 0xFF,
        r, g, b,
        0,      # White
        128,    # Brightness
        0
    ]
    msg = can.Message(arbitration_id=arb_id, is_extended_id=True, data=data)
    bus.send(msg)

def clear_all_leds(num_leds):
    print("→ Clearing strip")
    for i in range(num_leds):
        send_pixel(i, 0, 0, 0)
        time.sleep(0.01)

def read_led_info():
    print("Waiting for 0x359 feedback...")
    while True:
        msg = bus.recv(timeout=2)
        if msg and msg.arbitration_id == make_can_msg_id(DEVICE_ID, MANUFACTURER_ID, ESP_FEEDBACK_API, DEVICE_NUMBER):
            num_leds = (msg.data[0] << 8) | msg.data[1]
            mode = msg.data[2]
            print(f"← Feedback: {num_leds} LEDs | Mode: {mode}")
            return num_leds, mode

def wipe_one_by_one(num_leds, color, delay=0.02):
    clear_all_leds(num_leds)
    time.sleep(0.05)
    print(f"→ Wiping color {color}")
    for i in range(num_leds):
        send_pixel(i, *color)
        time.sleep(delay)

# —— Main Loop ——
if __name__ == "__main__":
    num_leds, mode = read_led_info()
    if mode != 255:
        send_mode_255()
        time.sleep(0.2)

    colors = [
        (255, 0, 0),
        (0, 255, 0),
        (0, 0, 255),
        (255, 255, 0),
        (0, 255, 255),
        (255, 0, 255),
        (255, 255, 255)
    ]

    while True:
        for color in colors:
            wipe_one_by_one(num_leds, color)
            time.sleep(0.3)
